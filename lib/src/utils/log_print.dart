import 'dart:convert';
import 'package:flutter/foundation.dart';

class PrintLog {
  final String message;
  final dynamic res;

  PrintLog(this.message, this.res);

  String get microphone => _print('üé§');

  String get fileFolder => _print('üìÅ');

  String get briefcase => _print('üíº');

  String get mobilePhone => _print('üì±');

  String get link => _print('üîó');

  String get dollar => _print('üíµ');

  String get rupee => _print('‚Çπ');

  String get battery => _print('üîã');

  String get method => _print('‚öôÔ∏è');

  String get header => _print('üìù');

  String get warning => _print('‚ö†Ô∏è');

  String get notification => _print('üîî');

  String get info => _print('‚ÑπÔ∏è');

  String get voice => _print('üó£Ô∏è');

  String get denied => _print('üö´');

  String get failed => _print('üö®');

  String get request => _print('üì°');

  String get token => _print('üîë');

  String get error => _print('‚ùå');

  String get success => _print('‚úÖ');

  String get stop => _print('‚õî');

  _print(String emoji) {
    final logMessage = '$emoji $message';
    if (res == null) {
      int length = logMessage.length;
      debugPrint('‚ä∏${'‚ä∏' * length}');
      debugPrint('‚§í $message');
      debugPrint('‚ä∏${'‚ä∏' * length}');
      return;
    }

    if (res.runtimeType == String) {
      String d = res;
      if (d.isEmpty) {
        return;
      }
      int length = logMessage.length + d.length + 5;
      debugPrint('‚ä∏${'‚ä∏' * length}');
      debugPrint('‚§í $logMessage $res ');
      debugPrint('‚ä∏${'‚ä∏' * length}');
      return logMessage;
    }
    if (res is Map) {
      debugModePrint('‚ä∏' * 90);
      debugPrint('‚§í $logMessage ');
      _printJson(res);
      return logMessage;
    }
    return logMessage;
  }

  void _printJson(Map map) {
    if (map.isEmpty) return;
    String jsonString = jsonEncode(map);
    String formattedJson = _formatJson(jsonString);
    _printColoredJson(formattedJson);
    debugModePrint('‚ä∏' * 90);
  }

  String _formatJson(String json) {
    var encoder = const JsonEncoder.withIndent('  ');
    return encoder.convert(jsonDecode(json));
  }

  void _printColoredJson(String json) {
    List<String> lines = json.split('\n');
    for (int i = 0; i < lines.length; i++) {
      debugModePrint('‚§í ${lines[i]}');
    }
  }
  debugModePrint(p0) {
    if (kDebugMode) {
      print(p0);
    }
  }
}

PrintLog printLog(String message, [dynamic data = '']) {
  return PrintLog(message, data);
}
